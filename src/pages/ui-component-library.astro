---
import PageLayout from "../layouts/PageLayout.astro"
import ArticleWrapper from "../components/ArticleWrapper.astro"
import Screenshot from "../components/Screenshot.astro"
import Figure from "../components/Figure.astro"
import CodeBlock from "../components/CodeBlock.astro";
import linkIcon from "../images/link-icon.svg?raw"
import githubIcon from "../images/github.svg?raw"
import heroImage from '../images/ui-library-composer.png';
import listPanelsImage from '../images/list-panels.png';
import complexListPanels from '../images/complex-list-panels.png';
import listPanel from "../code-snippets/list-panel.html?raw"
import listPanelItemActions from "../code-snippets/list-panel-item-actions.html?raw"
import listPanelExpandable from "../code-snippets/list-panel-expandable.html?raw"
---

<PageLayout
  title="UI Component Library"
  description="I designed and built a Vue.js component library for the world's most widely used scholarly publishing software."
  color="#002C40"
>
  <Fragment slot="links">
    <a class="button" href="https://docs.pkp.sfu.ca/dev/ui-library/3.4/">
      View Library
      <Fragment set:html={linkIcon} />
    </a>
    <a class="button" href="https://github.com/pkp/ui-library/">
      View Source
      <Fragment set:html={githubIcon} />
    </a>
  </Fragment>
  <ArticleWrapper>
    <Figure>
      <Screenshot
        image={heroImage}
        alt="Screenshot of the Composer component"
      />
      <Fragment slot="caption">
        A screenshot of a composite component for sending an email. See the <a class="link" href="https://docs.pkp.sfu.ca/dev/ui-library/3.4/#/component/Composer">&lt;Composer&gt;</a>.
      </Fragment>
    </Figure>
    <p class="max-w-xl">
        I designed and built a UI component library for the world's most widely used scholarly publishing software. Built with Vue.js, the library acts as a development tool, a documentation resource, and a collection of accessible components for everything from tabs to step-by-step workflows.
    </p>
    <p class="max-w-xl">
      I wrote almost every component, mixin and utility in the Public Knowledge Project's <a class="link" href="https://docs.pkp.sfu.ca/dev/ui-library/3.4">UI Library</a>. This library powers the editorial backend of PKP's open-source applications, where editors triage submissions, manage peer review assignments, and publish scholarly articles, books and preprints. Their flagship software, Open Journal Systems, is used by more than <a class="link" href="https://pkp.sfu.ca/software/ojs/usage-data/">30,000 journals</a> in 100+ countries and dozens of languages.
    </p>
    <p class="max-w-xl">
      The component library includes everything from simple buttons and badges to tabs and forms. I adopted third-party components wherever possible, but there weren't many that supported our localization and accessibility requirements off-the-shelf. So I often had to write bespoke components, like keyboard-friendly handles to <a class="link" href="https://docs.pkp.sfu.ca/dev/ui-library/3.4/#/component/Orderer">reorder items</a>. Sometimes, I was able to use a third-party library by writing a small wrapper in order to implement accessible controls, like I did with the <a class="link" href="https://docs.pkp.sfu.ca/dev/ui-library/3.4/#/component/Modal">modals</a> and <a class="link" href="https://docs.pkp.sfu.ca/dev/ui-library/3.4/#/mixins/dialog">dialogs</a>.
    </p>
    <Figure>
      <video controls="true">
        <source src="/videos/modal-focus-trap.webm" type="video/webm">
        <source src="/videos/modal-focus-trap.mp4" type="video/mp4">
      </video>
      <Fragment slot="caption">
        A focus trap prevents the focus from escaping the modal when using the keyboard or assistive technology. When the modal is closed, the focus is moved back to where it was before the modal opened.
      </Fragment>
    </Figure>
    <h2
      class="
        w-full
        max-w-xl
        text-2xl-vw
        leading-normal
        font-bold
        sm-landscape:text-2xl
        sm-landscape:leading-normal
        md:text-lg-vw
        md:leading-normal
        lg:text-xl
        lg:leading-normal
        xl:text-3xl
        xl:leading-normal
      "
    >
      ListPanels
    </h2>
    <p class="max-w-xl">
      One of the first components that I built for this library was the <code>&lt;ListPanel&gt;</code> (<a class="link" href="https://docs.pkp.sfu.ca/dev/ui-library/3.4/#/component/ListPanel/">docs</a>, <a class="link" href="https://github.com/pkp/ui-library/blob/c7cb4e12b06dca912b9fbe21831d15feb3ad020d/src/components/ListPanel/ListPanel.vue">source</a>). There are dozens of different data models in the system and each one of them needs a slightly different UI to view and edit them. So I built the <code>&lt;ListPanel&gt;</code> to be an extensible component that would work with a lot of variations.
    </p>
    <Figure>
      <Screenshot
        image={listPanelsImage}
        alt="Screenshot of the Composer component"
      />
      <Fragment slot="caption">
        A flexible component to add, edit, search and filter items in a list. View <a class="link" href="https://docs.pkp.sfu.ca/dev/ui-library/3.4/#/component/ListPanel/">&lt;ListPanel&gt;</a>
      </Fragment>
    </Figure>
    <p class="max-w-xl">
      I used slots so that my colleagues could easily adapt the lists to serve their needs, while enforcing some constraints that helped them use the component in a consistent way across the app. In it's simplest form, a <code>&lt;ListPanel&gt;</code> only needs to be passed an array of items.
    </p>
    <div class="max-w-full">
      <CodeBlock
        code={listPanel}
        lang="html"
      >
        A basic <a class="link" href="https://docs.pkp.sfu.ca/dev/ui-library/3.4/#/component/ListPanel"><code>&lt;ListPanel&gt;</code></a>
      </CodeBlock>
    </div>
    <p class="max-w-xl">
      A developer can add actions to each item by using the predefined <code>item-actions</code> slot.
    </p>
    <div class="max-w-full">
      <CodeBlock
        code={listPanelItemActions}
        lang="html"
      >
        A <code>&lt;ListPanel&gt;</code> with an edit button for each item. <a class="link" href="https://docs.pkp.sfu.ca/dev/ui-library/3.4/#/component/ListPanel/with-item-actions">Example</a>
      </CodeBlock>
    </div>
    <p class="max-w-xl">
      There are several pre-defined slots that allow developers to change the header, add a sidebar, or override the list item completely to implement more complex features like an expandable, accordion-like list item.
    </p>
    <div class="max-w-full">
      <CodeBlock
        code={listPanelExpandable}
        lang="html"
      >
        A &lt;ListPanel&gt; with accordion-like expansion. <a class="link" href="https://docs.pkp.sfu.ca/dev/ui-library/3.4/#/component/ListPanel/with-expandable-item">Example</a>
      </CodeBlock>
    </div>
    <p class="max-w-xl">
      Using the <code>&lt;ListPanel&gt;</code> as a base, I was able to build several composite components to <a class="link" href="https://docs.pkp.sfu.ca/dev/ui-library/3.4/#/component/ListPanel/components/SelectReviewerListPanel">find a peer reviewer</a>, <a class="link" href="https://docs.pkp.sfu.ca/dev/ui-library/3.4/#/component/ListPanel/components/SubmissionsListPanel">track submissions</a>, and <a class="link" href="https://docs.pkp.sfu.ca/dev/ui-library/3.4/#/component/ListPanel/components/SubmissionFilesListPanel">upload files</a>.
    </p>
    <Figure>
      <Screenshot
        image={complexListPanels}
        alt="Screenshot of composite ListPanel components"
      />
      <Fragment slot="caption">
        The &lt;ListPanel&gt; was used to build composite components to <a class="link" href="https://docs.pkp.sfu.ca/dev/ui-library/3.4/#/component/ListPanel/components/SubmissionsListPanel">track submissions</a> (left) and <a class="link" href="https://docs.pkp.sfu.ca/dev/ui-library/3.4/#/component/ListPanel/components/SelectReviewerListPanel">select peer reviewers</a> (right).
      </Fragment>
    </Figure>
    <h2
      class="
        w-full
        max-w-xl
        text-2xl-vw
        leading-normal
        font-bold
        sm-landscape:text-2xl
        sm-landscape:leading-normal
        md:text-lg-vw
        md:leading-normal
        lg:text-xl
        lg:leading-normal
        xl:text-3xl
        xl:leading-normal
      "
    >
      Autosave and Dropped Connections
    </h2>
    <p class="max-w-xl">
      When I worked on a ground-up rebuild of our submission wizard, I implemented an autosave feature to make sure that authors would never lose their progress (<a class="link" href="https://docs.pkp.sfu.ca/dev/ui-library/3.4/#/pages/autosave">docs</a>, <a class="link" href="https://github.com/pkp/ui-library/blob/997480bb6be6188f052561a299ce81c6eb089fda/src/mixins/autosave.js">source</a>). Once we started saving data on their behalf, we had to figure out how to handle dropped connections gracefully. If an author loses connection when going through a tunnel or working on dodgy wifi, I wanted to make sure the system wouldn't fail them.
    </p>
    <p class="max-w-xl">
      I solved this problem by creating a queue (<a class="link" href="https://github.com/pkp/ui-library/blob/997480bb6be6188f052561a299ce81c6eb089fda/src/mixins/autosave.js#L176-L204">source</a>). When a dirty form is detected, the autosave data is sent to the queue and the HTTP requests are processed one by one. As soon as the queue detects a lost connection, the request payload is saved to the browser's local storage and the app begins pinging the server to detect the connection status. Once the connection is restored, it will pull the autosaves out of local storage and process them. Autosaves can be replayed like this even if the user has closed the browser and returned later.
    </p>
    <Figure>
      <video controls="true">
        <source src="/videos/autosave-reconnect.webm" type="video/webm">
        <source src="/videos/autosave-reconnect.mp4" type="video/mp4">
      </video>
      <Fragment slot="caption">
        Users can keep working if they lose connection and autosaves will resume as soon as the connection is restored.
      </Fragment>
    </Figure>
    <p class="max-w-xl">
      In our software, third-party plugins can add new fields, forms and custom components to the submission wizard. To support these use cases, I decoupled the autosave feature from the default forms and abstracted it into a mixin (<a class="link" href="https://docs.pkp.sfu.ca/dev/ui-library/3.4/#/pages/autosave">docs</a>) that allows plugins to send a payload to the autosave queue: just a data object, a timestamp, and the URL to send it to. These autosaves can be sent to any API endpoint and the UI treats them the same as autosaves triggered by the core application.
    </p>
    <h2
      class="
        w-full
        max-w-xl
        text-2xl-vw
        leading-normal
        font-bold
        sm-landscape:text-2xl
        sm-landscape:leading-normal
        md:text-lg-vw
        md:leading-normal
        lg:text-xl
        lg:leading-normal
        xl:text-3xl
        xl:leading-normal
      "
    >
      Accessible Date Range Picker
    </h2>
    <p class="max-w-xl">
      When we added a UI to view visitor statistics, we needed a way for users to select a date range. I looked into third-party date picker components, but everything in the Vue ecosystem at the time had accessibility problems. We didn't have the time to build a fully-working date picker ourselves, so I opted to implement a lightweight alternative.
    </p>
    <Figure>
      <video controls="true">
        <source src="/videos/date-range.webm" type="video/webm">
        <source src="/videos/date-range.mp4" type="video/mp4">
      </video>
      <Fragment slot="caption">
        A keyboard-accessible alternative for selecting a date range when ranges frequently span several months or years.
      </Fragment>
    </Figure>
    <p class="max-w-xl">
      The <a class="link" href="https://docs.pkp.sfu.ca/dev/ui-library/3.4/#/component/DateRange">result</a> is a simple, keyboard-accessible dropdown that lets users select from a predefined list of date ranges, like the last 90 days or the last 12 months. It also provides a basic text input for users to type in the date range. We found the presets were more intuitive for users and using the text inputs turned out to be faster than a date picker for selecting lengthy reporting periods, like a calendar year.
    </p>
    <p class="max-w-xl">
      The library started with a few components and developed gradually as part of a long-term project to <a class="link" href="/code-modernization">refactor</a> an old jQuery UI. By the time I left, it had outgrown itself. The library would benefit from introducing some better abstractions to help manage a large-scale UI: state management, TypeScript, utility CSS classes, and an API abstraction for mocking server interactions in testing and development environments. The library itself could be abandoned in favor of <a class="link" href="https://storybook.js.org/">Storybook</a>. When we began, Storybook didn't work well with Vue's dev tools, so I built the library app as an alternative development and documentation tool.
    </p>
    <p class="max-w-xl">
      But code is never done — especially in an open-source project. As part of a small team, I only worked on the UI Library part time. Much of my time with the <a class="link" href="https://pkp.sfu.ca/">Public Knowledge Project</a> went into full-stack work developing new features, <a class="link" href="/code-modernization">modernizing</a> the PHP backend, and handling the technical <a class="link" href="/documentation">documentation</a> for the project. If that work doesn't interest you, take a look at a small <a class="link" href="/find-your-representatives">data-driven app</a> I wrote to find my local city councillors.
    </p>

  </ArticleWrapper>
</PageLayout>