---
import PageLayout from "../layouts/PageLayout.astro"
import ArticleWrapper from "../components/ArticleWrapper.astro"
import Screenshot from "../components/Screenshot.astro"
import Figure from "../components/Figure.astro"
import CodeBlock from "../components/CodeBlock.astro";
import linkIcon from "../images/link-icon.svg?raw"
import heroImage from '../images/docs-hub-wide.png';
import lifecycleImage from '../images/docs-request-lifecycle.png';
import apiImage from '../images/api-docs.png';
import contributorsGuideImage from '../images/docs-contributors-guide.png';
import codeReviewImage from '../images/code-review-expectations.png';
import publicationJson from '../code-snippets/publication.json?raw';
---

<PageLayout
  title="Documentation"
  description="I handled developer relations for an open source project, writing documentation, a contributor's guide, and a newsletter."
  color="#e08914"
>
  <Fragment slot="links">
    <a class="button" href="https://docs.pkp.sfu.ca/dev/">
      View Docs Hub
      <Fragment set:html={linkIcon} />
    </a>
  </Fragment>
  <ArticleWrapper>
    <Figure>
      <Screenshot
        image={heroImage}
        alt="Screenshot of the developer documentation hub"
      />
      <Fragment slot="caption">
        The documentation hub includes all of our technical docs for system administrators, contributors and third-party developers.
      </Fragment>
    </Figure>
    <p class="max-w-xl">
      When I joined the <a href="https://pkp.sfu.ca/">Public Knowledge Project</a>, I struggled to understand how their software was structured. Most of the code had been written by two or three developers, and they relied heavily on a shared understanding of the codebase. A class reference document was available, but there was no documentation which described the overall architecture or the choices they had made when designing the application.
    </p>
    <p class="max-w-xl">
      As our team grew, I was given a little time to write the documentation that I had wished existed when I started. The result was our main <a href="https://docs.pkp.sfu.ca/dev/documentation/en/">developer documentation</a>, a high-level orientation to the application's architecture. It covered the request lifecycle, routing, authentication and authorization, request handlers, and how we expressed domain concepts as entities and read and wrote them to the data store.
    </p>
    <Figure>
      <Screenshot
        image={lifecycleImage}
        alt="Screenshot of the request lifecycle diagram"
      />
      <Fragment slot="caption">
        I made a diagram to help visualise the <a href="https://docs.pkp.sfu.ca/dev/documentation/en/architecture-request">request lifecycle</a>.
      </Fragment>
    </Figure>
    <p class="max-w-xl">
      When we introduced a REST API, I adopted <code>json-schema</code> as a simple mechanism to describe our data objects.
    </p>
    <div class="max-w-full">
      <CodeBlock
        code={publicationJson}
        lang="json"
      >
        Example entity schema
      </CodeBlock>
    </div>
    <p class="max-w-xl">
      This allowed us to automate some of the validation and read/write operations in our data access objects. The upside was that the entity schemas could be reused in OpenAPI/Swagger, a machine-readable format commonly used to describe REST APIs. From there, it was pretty easy to generate <a href="https://docs.pkp.sfu.ca/dev/api/ojs/3.4">API documentation</a> using <code>redoc</code>.
    </p>
    <Figure>
      <Screenshot
        image={apiImage}
        alt="Screenshot of the REST API docs"
      />
      <Fragment slot="caption">
        Human-readable <a href="https://docs.pkp.sfu.ca/dev/api/ojs/3.4">documentation</a> for our REST API, with response payloads that are derived directly from the application's entity schemas.
      </Fragment>
    </Figure>
    <p class="max-w-xl">
      As our community grew, we had to find better ways to triage issues and review pull requests. I wrote a <a href="https://docs.pkp.sfu.ca/dev/contributors/">contributor's guide</a> which described how to report bugs and propose new features. It also outlined our code style and instructed developers how they should open a pull request.
    </p>
    <Figure>
      <Screenshot
        image={contributorsGuideImage}
        alt="Screenshot of PKP's contributor's guide"
      />
      <Fragment slot="caption">
        Our <a href="https://docs.pkp.sfu.ca/dev/contributors/">contributor's guide</a> helped new members of our community understand how we worked and — hopefully — made them feel more welcome.
      </Fragment>
    </Figure>
    <p class="max-w-xl">
      The part of the contributor's guide that I am most proud of is the section where we describe <a href="https://docs.pkp.sfu.ca/dev/contributors/#what-to-expect-from-a-code-review">what to expect from a code review</a>. At PKP, we worked hard to maintain a welcoming community. This section of the guide was written to convey how important it was for us to minimize <a href="https://en.wikipedia.org/wiki/Law_of_triviality">bike-shedding</a> and other forms of toxic behaviour common in open source tech communities.
    </p>
    <Figure>
      <Screenshot
        image={codeReviewImage}
        alt="Screenshot of code review section of contributor's guide"
      />
      <Fragment slot="caption">
        The best code reviews are opportunities for learning. No assholes, please.
      </Fragment>
    </Figure>
    <p class="max-w-xl">
      Finally, I started and wrote a bimonthly newsletter for developers. The newsletter sought to reach a segment of our community that wasn't active in GitHub issues or our community forum. I shared regular updates on the development team's work, as well as interesting work from the community.
    </p>
    <p class="max-w-xl">
      The documentation that I wrote for PKP will probably prove to be some of the most enduring work from my time with the organisation. The number of third-party developers, and the complexity of their customizations, grew a lot in recent years. And best of all, we found that new developers were able to get up to speed quickly and start contributing on difficult issues shortly after joining the team.
    </p>
  </ArticleWrapper>
</PageLayout>